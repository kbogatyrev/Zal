CREATE TABLE headword (id INTEGER PRIMARY KEY ASC, source TEXT, plural_of TEXT, comment TEXT, usage TEXT, variant TEXT, variant_comment TEXT, see_ref INTEGER, back_ref INTEGER, source_entry_id INTEGER, is_edited BOOLEAN DEFAULT (0));

CREATE TABLE homonyms (id INTEGER PRIMARY KEY ASC, headword_id INTEGER, homonym_number INTEGER, is_variant BOOLEAN,  is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (headword_id) REFERENCES headword (id));

CREATE TABLE stress (id INTEGER PRIMARY KEY ASC, headword_id INTEGER, stress_position INTEGER, is_primary BOOLEAN, is_variant BOOLEAN, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (headword_id) REFERENCES headword (id));

CREATE TABLE descriptor (id INTEGER PRIMARY KEY ASC, word_id INTEGER, graphic_stem TEXT, graphic_stem2 TEXT, is_variant BOOLEAN DEFAULT (0), main_symbol TEXT, part_of_speech INTEGER, is_plural_of BOOLEAN DEFAULT (0), is_intransitive BOOLEAN DEFAULT (0), is_reflexive BOOLEAN DEFAULT(0), main_symbol_plural_of TEXT, alt_main_symbol TEXT, inflection_type TEXT, comment TEXT, alt_main_symbol_comment TEXT, alt_inflection_comment TEXT, verb_stem_alternation TEXT, part_past_pass_zhd BOOLEAN DEFAULT (0), section INTEGER, no_comparative BOOLEAN DEFAULT (0), assumed_forms BOOLEAN DEFAULT (0), yo_alternation BOOLEAN DEFAULT (0), o_alternation BOOLEAN DEFAULT (0), second_genitive BOOLEAN DEFAULT (0), is_impersonal BOOLEAN DEFAULT (0), is_iterative BOOLEAN DEFAULT (0), has_aspect_pair BOOLEAN DEFAULT (0), has_difficult_forms BOOLEAN DEFAULT (0), has_missing_forms BOOLEAN DEFAULT (0), has_irregular_forms BOOLEAN DEFAULT (0), irregular_forms_lead_comment TEXT, restricted_contexts TEXT, contexts TEXT, cognate TEXT, trailing_comment TEXT, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (word_id) REFERENCES headword (id));

CREATE TABLE second_locative (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, is_optional BOOLEAN DEFAULT (0), preposition TEXT, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (descriptor_id) REFERENCES descriptor (id));

CREATE TABLE second_genitive (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (descriptor_id) REFERENCES descriptor (id));

CREATE TABLE inflection (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, is_primary BOOLEAN DEFAULT (0), inflection_type INTEGER, accent_type1 INTEGER, accent_type2 INTEGER, short_form_restrictions BOOLEAN DEAFULT (0), past_part_restrictions BOOLEAN DEAFULT (0), no_short_form BOOLEAN DEAFULT (0), no_past_part BOOLEAN DEAFULT (0), fleeting_vowel BOOLEAN DEFAULT (0), stem_augment BOOLEAN DEFAULT (0), inflected_parts INTEGER DEFAULT (0), is_second_part BOOLEAN DEFAULT(0), is_edited BOOLEAN DEFAULT(0));

CREATE TABLE difficult_forms (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, content TEXT);

CREATE TABLE missing_forms (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, content TEXT);

CREATE TABLE irregular_forms (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, gram_hash TEXT, wordform TEXT, is_alternative BOOLEAN DEFAULT (0), lead_comment TEXT, trailing_comment TEXT, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (descriptor_id) REFERENCES descriptor (id));

CREATE TABLE irregular_stress (id INTEGER PRIMARY KEY ASC, form_id INTEGER, position INTEGER, is_primary BOOLEAN, is_edited BOOLEAN DEFAULT(0), FOREIGN KEY (form_id) REFERENCES irregular_forms (id));

CREATE TABLE endings (id INTEGER PRIMARY KEY ASC, ending_string TEXT);

CREATE TABLE ending_data (id INTEGER PRIMARY KEY ASC, ending_id INTEGER, inflection_class INTEGER, inflection_type INTEGER, case_value INTEGER, person INTEGER, gender INTEGER, animacy INTEGER, stress INTEGER, number INTEGER, stem_augment BOOLEAN DEFAULT (0), common_deviation INTEGER, conjugation INTEGER, tense INTEGER, is_reflexive BOOLEAN DEFAULT(0), stem_auslaut INTEGER, adjective_pronominal_decl_subtype INTEGER, FOREIGN KEY (ending_id) REFERENCES endings (id));

CREATE TABLE stems (id INTEGER PRIMARY KEY ASC, stem_string TEXT UNIQUE);

CREATE TABLE stem_data (id INTEGER PRIMARY KEY ASC, stem_id INTEGER, gram_hash TEXT, lexeme_id INTEGER, FOREIGN KEY (stem_id) REFERENCES stems (id), FOREIGN KEY (lexeme_id) REFERENCES descriptor (id));

CREATE TABLE stress_data (id INTEGER PRIMARY KEY, form_id INTEGER, position INTEGER, is_primary BOOLEAN, is_variant BOOLEAN, FOREIGN KEY(form_id) REFERENCES wordforms);

CREATE TABLE wordforms (id INTEGER PRIMARY KEY ASC, stem_data_id INTEGER, ending_data_id INTEGER, FOREIGN KEY (stem_data_id) REFERENCES stem_data (id), FOREIGN KEY (ending_data_id) REFERENCES ending_data (id));

CREATE TABLE endings_for_analysis (id INTEGER PRIMARY KEY ASC, subtable_id INTEGER, ending TEXT, gram_hash TEXT, stress_pos INTEGER);

CREATE TABLE endings_meta (id INTEGER PRIMARY KEY ASC, subtable_id INTEGER, entries_count INTEGER);

CREATE TABLE subtables_for_heuristics (id INTEGER PRIMARY KEY ASC, subtable_id INTEGER, lexemes_count INTEGER, root_end TEXT, cut_right INTEGER, lemma_ending TEXT);

CREATE TABLE stems_for_analysis (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, stem TEXT, stress_pos INTEGER, endings_link INTEGER, lemma TEXT);

CREATE TABLE common_deviation (id INTEGER PRIMARY KEY ASC, inflection_id INTEGER, deviation_type INTEGER, is_optional BOOLEAN, is_edited BOOLEAN DEFAULT (0));

CREATE TABLE aspect_pair (id INTEGER PRIMARY KEY ASC, descriptor_id INTEGER, type INTEGER, data TEXT, is_variant BOOLEAN, comment TEXT, is_edited BOOLEAN DEFAULT (0));

CREATE TABLE test_data (id INTEGER PRIMARY KEY ASC, lexeme_id TEXT, gram_hash INTEGER, wordform TEXT);

CREATE TABLE test_data_stress (id INTEGER PRIMARY KEY ASC, test_data_id INTEGER, position INTEGER, is_primary BOOLEAN);

CREATE TABLE lexeme_hash_to_descriptor (id INTEGER PRIMARY KEY, lexeme_hash TEXT, descriptor_id INTEGER, inflection_id INTEGER);

-- CREATE TABLE lexeme_hash_to_descriptor (id INTEGER PRIMARY KEY, lexeme_hash TEXT, descriptor_id INTEGER, inflection_id INTEGER);

CREATE TABLE conversion_source_text (id INTEGER PRIMARY KEY, guid TEXT, source_text TEXT);

CREATE TABLE conversion_errors (id INTEGER PRIMARY KEY, Description TEXT, Paragraph TEXT, Resolved INTEGER DEFAULT 0);

CREATE TABLE incomplete_parses (id INTEGER PRIMARY KEY, unparsed_segment TEXT, source_text TEXT);

CREATE TABLE edited_lexemes (id INTEGER PRIMARY KEY, lexeme_hash TEXT);

-- Transcription --
CREATE TABLE transcription_inputs (id INTEGER PRIMARY KEY, input_chars TEXT);

CREATE TABLE transcription_rules (id INTEGER PRIMARY KEY, input_id INTEGER, stress TEXT, left_contexts TEXT, right_contexts TEXT, morpheme_type TEXT, subparadigm TEXT, gramm_gender TEXT, gramm_number TEXT, gramm_case TEXT, strength TEXT, is_variant BOOLEAN, target TEXT, comment TEXT);
-- Text analysis --
CREATE TABLE text (id INTEGER PRIMARY KEY ASC, name TEXT, contents TEXT);

CREATE TABLE text_metadata (id INTEGER PRIMARY KEY ASC, text_id INTEGER, category TEXT, content text, FOREIGN KEY (text_id) REFERENCES 
text(id));

CREATE TABLE lines_in_text (id INTEGER PRIMARY KEY ASC, text_id INTEGER, line_number INTEGER, text_offset INTEGER, length INTEGER, number_of_words INTEGER, source TEXT, FOREIGN KEY (text_id) REFERENCES text(id));

-- word_text redundant, needed for testing
CREATE TABLE words_in_line (id INTEGER PRIMARY KEY ASC, line_id INTEGER, word_position INTEGER, reverse_word_position INTEGER, line_offset INTEGER, word_length INTEGER, word_text TEXT, FOREIGN KEY (line_id) REFERENCES lines_in_text(id));

CREATE TABLE word_to_wordform (id INTEGER PRIMARY KEY ASC, word_in_line_id INTEGER, wordform_id INTEGER, FOREIGN KEY (word_in_line_id) REFERENCES words_in_line(id), FOREIGN KEY (wordform_id) REFERENCES wordforms(id));

-- this table is added to simplify retrieval of transcription and stress positions
CREATE TABLE tact_group (id INTEGER PRIMARY KEY ASC, line_id INTEGER, first_word_position INTEGER, main_word INTEGER, num_of_words INTEGER, source TEXT, gram_hash TEXT, transcription TEXT, num_of_syllables INTEGER, stressed_syllable INTEGER, reverse_stressed_syllable INTEGER, secondary_stressed_syllable INTEGER, FOREIGN KEY (line_id) REFERENCES lines_in_text(id));

CREATE TABLE word_to_tact_group (id INTEGER PRIMARY KEY ASC, word_to_wordform_id INTEGER, tact_group_id INTEGER, position_in_tact_group INTEGER, FOREIGN KEY (word_to_wordform_id) REFERENCES word_to_wordform(id));

-------------------
-- needed for merging edited DB with a newly generated DB
CREATE TABLE lexeme_hashes_changed (id INTEGER PRIMARY KEY ASC, old_hash TEXT, new_hash TEXT);

-------------------

CREATE INDEX idx_stems_select ON stems (stem_string);

CREATE INDEX idx_stem_data_gram_hash ON stem_data (gram_hash);
CREATE INDEX idx_stem_data_stem_id ON stem_data (stem_id);
CREATE INDEX idx_stem_data_select_lexeme_id ON stem_data (lexeme_id);
CREATE INDEX idx_stem_data_select ON stem_data (lexeme_id, stem_id, gram_hash);

CREATE INDEX idx_ending_data1 ON ending_data (number, case_value, stress);
CREATE INDEX idx_ending_data2 ON ending_data (gender, number, case_value, animacy, stress);
-- CREATE INDEX idx_ending_data3 ON ending_data (gender, number, stress);
CREATE INDEX idx_ending_data4 ON ending_data (person, number, stress, stem_auslaut, conjugation, is_reflexive);

CREATE INDEX idx_common_deviation_id ON common_deviation (id, inflection_id);
CREATE INDEX idx_descriptor_id ON descriptor (id, word_id);
CREATE INDEX idx_descriptor_gs ON descriptor (graphic_stem);
CREATE INDEX idx_descriptor_ms ON descriptor (main_symbol);
CREATE INDEX idx_descriptor_pos ON descriptor (part_of_speech);
CREATE INDEX idx_headword_id ON headword (id);
CREATE INDEX idx_headword_source ON headword (source);
CREATE INDEX idx_inflection_id ON inflection (id, descriptor_id);
CREATE INDEX idx_inflection_descr ON inflection (descriptor_id);
CREATE INDEX idx_stress_id ON stress (id, headword_id);
CREATE INDEX idx_stress_hw ON stress (headword_id);
CREATE INDEX idx_test_data_id ON test_data (id, lexeme_id);
CREATE INDEX idx_test_data_stress ON test_data_stress (id, test_data_id);
CREATE INDEX idx_lexeme_hash_to_descriptor ON lexeme_hash_to_descriptor (lexeme_hash);
CREATE INDEX idx_stem_string ON stems (stem_string);

CREATE INDEX idx_endings_ending_string ON endings (ending_string);

CREATE INDEX idx_ending_data_ending_id ON ending_data (ending_id);
CREATE INDEX idx_ending_data_inflection_class ON ending_data (inflection_class);
CREATE INDEX idx_ending_data_inflection_type ON ending_data (inflection_type);
CREATE INDEX idx_ending_data_gender ON ending_data (gender);
CREATE INDEX idx_ending_data_animacy ON ending_data (animacy);
CREATE INDEX idx_ending_data_stem_augment ON ending_data (stem_augment);
CREATE INDEX idx_ending_data_common_deviation ON ending_data (common_deviation);
CREATE INDEX idx_ending_data_case_value ON ending_data (case_value);
CREATE INDEX idx_ending_data_stress ON ending_data (stress);

CREATE INDEX idx_endings_id ON endings_for_analysis (id);
CREATE INDEX idx_endings_subtable_id ON endings_for_analysis (subtable_id);
CREATE INDEX idx_endings ON endings_for_analysis (ending);
CREATE INDEX idx_stems ON stems_for_analysis (stem);
CREATE INDEX idx_stems_id ON stems_for_analysis (id);

CREATE INDEX idx_irregular_forms_descriptor_id ON irregular_forms (descriptor_id);
CREATE INDEX idx_irregular_forms_gram_hash ON irregular_forms (gram_hash);
CREATE INDEX idx_irregular_forms_wordform ON irregular_forms (wordform);
CREATE INDEX idx_irregular_forms_is_alternative ON irregular_forms (is_alternative);

CREATE INDEX idx_wordforms_stem_data_id ON wordforms (stem_data_id);
CREATE INDEX idx_wordforms_ending_data_id ON wordforms (ending_data_id);
 
CREATE INDEX idx_stems_id1 ON stems (id);

CREATE INDEX idx_stress_data_form_id on stress_data (form_id);
CREATE INDEX idx_stress_data_position on stress_data (position);
CREATE INDEX idx_stress_data_is_primary on stress_data (is_primary);

CREATE INDEX idx_text ON text(id);
CREATE INDEX idx_lines_in_text ON lines_in_text(id);
CREATE INDEX idx_words_in_line ON words_in_line(id);
CREATE INDEX idx_word_to_wordform ON word_to_wordform(id);
CREATE INDEX idx_tact_group ON tact_group(id);
CREATE INDEX idx_word_to_tact_group ON word_to_tact_group(id);
